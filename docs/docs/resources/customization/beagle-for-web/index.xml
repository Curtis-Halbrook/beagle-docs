<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beagle – Beagle for Web</title>
    <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/</link>
    <description>Recent content in Beagle for Web on Beagle</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Advanced topics</title>
      <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/advanced-topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/advanced-topics/</guid>
      <description>
        
        
        &lt;hr&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Customized Actions</title>
      <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/customized-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/customized-actions/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;It is possible to create customized actions with Beagle for your components.&lt;/p&gt;
&lt;h3 id=&#34;create-an-actionhandler&#34;&gt;Create an ActionHandler&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create an interface with the required property  &lt;em&gt;&lt;code&gt;_beagleAction_&lt;/code&gt;&lt;/em&gt; and  with other necessary values, like the example below, where two parameters were created: A and B.&lt;/p&gt;
&lt;p&gt;__The customized action name is &lt;code&gt;_beagleAction_&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomAction&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;_beagleAction_&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;custom:myCustomAction&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;parameterA&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;parameterB&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;number&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Create the function  &lt;code&gt;ActionHandler&lt;/code&gt; with the interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ActionHandler&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;@zup-it/beagle-web&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;customAction&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ActionHandler&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CustomAction&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;({&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

In the ActionHandler function, you can access the defined values like the example above:  &lt;code&gt;action.parameterA&lt;/code&gt; or &lt;code&gt;action.parameterB.&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Add the action name in the association file according to your framework:&lt;/p&gt;
&lt;p&gt;For Angular: Add beagle.module.ts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BeagleModule&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;customActions&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;custom:myCustomAction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;customAction&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//nome do action handler
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Beagle&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For React: add to your Beagle configuration file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;createBeagleUIService&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;any&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;({&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;customActions&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;custom:myCustomAction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;customAction&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//nome do action handler
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;adding-actions-to-json&#34;&gt;Adding actions to JSON&lt;/h3&gt;
&lt;p&gt;Add the customized action to the JSON and add the defined parameters in the ActionHandler interface&lt;/p&gt;
&lt;p&gt;See below an example with a button:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
    &amp;#34;_beagleComponent_&amp;#34;: &amp;#34;beagle:button&amp;#34;,
    &amp;#34;text&amp;#34;: &amp;#34;Clique para ação customizada&amp;#34;,
    &amp;#34;onPress&amp;#34;: {
        &amp;#34;_beagleAction_&amp;#34;: &amp;#34;custom:myCustomAction&amp;#34;,
        &amp;#34;parameterA&amp;#34;: &amp;#34;Beagle Web&amp;#34;,
        &amp;#34;parameterB&amp;#34;: 10
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Pay attention to the class types when you add a customized action parameter, the example above was &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;number.&lt;/code&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Custom Component</title>
      <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/custom-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/custom-component/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;creating-a-customized-component&#34;&gt;Creating a customized component&lt;/h2&gt;
&lt;p&gt;To create a customized component, follow the next steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need an ordinary component, after that you have to create a new one in your project:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The component will be created with  &lt;code&gt;customText&lt;/code&gt; name, in this example. In your terminal, use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;ng generate component components/customText --skip-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, a component will be created to render a  &lt;code&gt;CustomTextComponent&lt;/code&gt; text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;React&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Beagle&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Web&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;React&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Now, add Beagle&amp;rsquo;s library association in your project&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;code&gt;beagle-components.module.ts&lt;/code&gt; file and add the new &lt;code&gt;CustomTextComponent&lt;/code&gt; generated in the list, see the example below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;./components/custom-text/custom-text.component&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// import all the components you&amp;#39;re going to use with beagle
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;components&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;@NgModule&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;declarations&lt;/span&gt;: &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;components&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;entryComponents&lt;/span&gt;: &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;components&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;exports&lt;/span&gt;: &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;components&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;imports&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// everything your components depend on
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BeagleComponentsModule&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On  &lt;code&gt;beagle.module.ts&lt;/code&gt; file, add your new component in the association&amp;rsquo;s list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BeagleModule&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;@zup-it/beagle-angular&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;./components/custom-text/custom-text.component&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// import all the components you wish to use with Beagle.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;@BeagleModule&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;baseUrl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;http://localhost:4200/assets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;module&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;./beagle-components.module&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;BeagleComponentsModule&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;components&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Associate every beagle component to your angular component.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;custom:text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Beagle&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

If you didn&amp;rsquo;t find the &lt;code&gt;beagle-components.module.ts&lt;/code&gt; files or &lt;code&gt;beagle.module.ts&lt;/code&gt;, &lt;a href=&#34;../../../get-started/installing-beagle/&#34;&gt;&lt;strong&gt;see how to configure Beagle&amp;rsquo;s library in your project.&lt;/strong&gt; &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Now, access Beagle&amp;rsquo;s library configuration file in your project and add your component to the association list. If you don&amp;rsquo;t have this file in your project,&lt;a href=&#34;https://docs.usebeagle.io/v/v1.0-en/get-started/usando-beagle/web/react-como-usar&#34;&gt; &lt;strong&gt;learn here how to configure Beagle Web React library.&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;createBeagleUIService&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;@zup-it/beagle-react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;../components/CustomTextComponent&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;createBeagleUIService&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;any&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;({&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;baseUrl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;components&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;custom:text&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the step below, the word custom was added to identify the components, this will make Beagle&amp;rsquo;s library understand that this component does not belong to the predefined component&amp;rsquo;s list.&lt;/p&gt;
&lt;h3 id=&#34;adding-properties-to-the-component&#34;&gt;Adding properties to the component&lt;/h3&gt;
&lt;p&gt;To add properties to the created component, follow the next steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;code&gt;custom-text.component.ts&lt;/code&gt; file and add an  &lt;code&gt;@Input&lt;/code&gt; like the code below:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;OnInit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;@Component&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;({&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;app-custom-text&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;templateUrl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;./custom-text.component.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;styleUrls&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;./custom-text.component.less&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;OnInit&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;@Input&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;myCustomText&lt;/span&gt;: &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;

  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;constructor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#000&#34;&gt;ngOnInit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Add the reference to the file &lt;code&gt;custom-text.component.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-markup&#34; data-lang=&#34;markup&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{{myCustomText}}&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

If  you have a project that is currently running, it is necessary to restart with the commands: &lt;code&gt;yarn serve&lt;/code&gt; or &lt;code&gt;npm run serve&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;On React, all the attributes defined in the JSON can be accessed through props, see the example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;React&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;props&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;){&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;props&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;myCustomText&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CustomTextComponent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;creating-a-json&#34;&gt;Creating a JSON&lt;/h3&gt;
&lt;p&gt;Now you can add your component to a JSON file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
    &amp;#34;_beagleComponent_&amp;#34;: &amp;#34;beagle:container&amp;#34;,
    &amp;#34;children&amp;#34;: [
        {
            &amp;#34;_beagleComponent_&amp;#34;: &amp;#34;custom:text&amp;#34;,
            &amp;#34;myCustomText&amp;#34;:&amp;#34;Beagle Web is Awesome&amp;#34;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;

Done! You have created a customized component that receives properties and it is rendered by Beagle&amp;rsquo;s library.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Cache strategy</title>
      <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/cache-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/cache-strategy/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Beagle Web offers some cache strategies, one of them is the &lt;a href=&#34;https://docs.usebeagle.io/v/v1.0-en/resources/cache#how-does-the-cache-protocol-works&#34;&gt;&lt;strong&gt;Beagle&amp;rsquo;s pattern cache protocol guided by the backed&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other strategies you are able to use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;beagle-with-fallback-to-cache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beagle-cache-only&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;network-with-fallback-to-cache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache-with-fallback-to-network&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;network-only&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache-first&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

The two first implements Beagle&amp;rsquo;s cache protocol, the others are independent from it.
&lt;/div&gt;

&lt;h2 id=&#34;where-is-the-cache-stored&#34;&gt;Where is the cache stored?&lt;/h2&gt;
&lt;p&gt;On the web, the cache data are stored in the browser.&lt;/p&gt;
&lt;h2 id=&#34;types-of-strategies&#34;&gt;Types of strategies&lt;/h2&gt;
&lt;p&gt;You have two strategy possibilities on Beagle: the ones that are compatible with the cache protocol and the others that are independent. You will see next how each works:&lt;/p&gt;
&lt;h2 id=&#34;compatible-strategies&#34;&gt;Compatible strategies&lt;/h2&gt;
&lt;h3 id=&#34;1-beagle-with-fallback-to-cache&#34;&gt;&lt;strong&gt;1. beagle-with-fallback-to-cache&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Standard strategy that implements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Beagle&amp;rsquo;s cache protocol.&lt;/li&gt;
&lt;li&gt;Adding to a fallback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here, it is locally  saved on the storage the tree and the related cache protocol metadata (&lt;code&gt;beagle-hash&lt;/code&gt;, &lt;code&gt;max-age&lt;/code&gt; and a time identifier that  shows the time the request has been sent).&lt;/p&gt;
&lt;p&gt;This strategy allows you to use a fallback to return a tree, even in some error cases. When this happens, the fallback returns a tree that has already been locally saved before (if it exists), even if it is not updated.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;It is important to make it clear, this configuration will only work if the backend has the cache enabled.&lt;/p&gt;
&lt;p&gt;Beagle Web only extracts the header information from the requests. If they are not available, the request will always be sent and even with the stored cache, it won&amp;rsquo;t be used, the exception is the for a fallback.&lt;/p&gt;
&lt;p&gt;If you backend is with disabled cache, the payload from the tree will be saved on the storage and it will not be used.&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;2-beagle-cache-only&#34;&gt;&lt;strong&gt;2. beagle-cache-only&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This strategy only implements &lt;a href=&#34;../../cache/&#34;&gt;&lt;strong&gt;Beagle&amp;rsquo;s cache protocol&lt;/strong&gt;&lt;/a&gt;. This means that, it works the same way the standard one, but without the fallback.&lt;/p&gt;
&lt;p&gt;When you enable this strategy, the tree that is on cache it is only used if there is a valid max-age or if it receives a 304 status from the backend.&lt;/p&gt;
&lt;p&gt;In case the request fails, the view will not be displayed and it can not exhibit the error component, according to the config definition.&lt;/p&gt;
&lt;h2 id=&#34;independents-strategies&#34;&gt;Independents strategies&lt;/h2&gt;
&lt;h3 id=&#34;1-network-with-fallback-to-cache&#34;&gt;&lt;strong&gt;1. network-with-fallback-to-cache&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This strategy starts the request on backend to bring as a result what it is saved on cache. This cache will only be used in case the request fails, working as fallback.&lt;/p&gt;
&lt;p&gt;If the request fails and the data is on cache, you will be able to make the return correctly. In case this does not happens, the error component is (or not) displayed according the to the config definition.&lt;/p&gt;
&lt;h3 id=&#34;2-cache-with-fallback-to-network&#34;&gt;&lt;strong&gt;2. cache-with-fallback-to-network:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This one starts the request on cache to return the tree that it is rendered in this cache. If nothing is found, the fallback will make a request to search the tree.&lt;/p&gt;
&lt;p&gt;This way, the request is only triggered if the data is not found on cache.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

On this kind of strategy, there isn&amp;rsquo;t an invalid one or a cache revalidation. While the data is on cache, it is considered valid.
&lt;/div&gt;

&lt;h3 id=&#34;3-network-only&#34;&gt;&lt;strong&gt;3. network-only&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This strategy makes exclusive backend requests. On this case, you will always send a request to search the trees to be rendered.&lt;/p&gt;
&lt;p&gt;If the request fails, there isn&amp;rsquo;t a fallback to display (or not)  the error component.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This is the only strategy that does not save data on local storage. For that, this one is recommended  for cases you want Beagle Web to not save any information on the storage.
&lt;/div&gt;

&lt;h3 id=&#34;4-cache-first&#34;&gt;&lt;strong&gt;4. cache-first:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This one sends the view after searching on cache, even if it doesn&amp;rsquo;t find the request that it is looking for.&lt;/p&gt;
&lt;p&gt;If the tree is found on cache, it is used to render the view. When the request returns, the view is updated with the request result. In case it returns an error, the displayed view is kept with the cache information.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-alter-the-cache-strategy-used&#34;&gt;How do I alter the cache strategy used?&lt;/h2&gt;
&lt;p&gt;To change the cache strategy, you have to use the &lt;code&gt;strategy&lt;/code&gt; parameter with the strategy name chosen inside Beagle&amp;rsquo;s config.&lt;/p&gt;
&lt;p&gt;On the configs below, you will find an example on how to alter the strategy to &lt;code&gt;network-only&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@BeagleModule({
  baseUrl: &amp;#39;yourBackendUrlGoesHere&amp;#39;,
  module: {
    path: &amp;#39;./beagle-components.module&amp;#39;,
    name: &amp;#39;BeagleComponentsModule&amp;#39;,
  },
  components: {
    // Associate every beagle component to your angular component. 
  },
  strategy: &amp;#39;network-only&amp;#39;
})
export class Beagle { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Standard headers</title>
      <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/standard-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/standard-headers/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Beagle Web sends &lt;strong&gt;two types of headers&lt;/strong&gt; that are a standart for Beagle:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;beagle-platform:&lt;/strong&gt; header used to indicate to the backend that this request came from the Web. This way, the value is sent is always &lt;strong&gt;WEB&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beagle-hash&lt;/strong&gt;: header used to make &lt;a href=&#34;../../cache/&#34;&gt;&lt;strong&gt;Beagle&amp;rsquo;s cache protocol&lt;/strong&gt; &lt;/a&gt;work properly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By pattern, these headers are always sent, however it can be disabled by the &lt;code&gt;useBeagleHeaders&lt;/code&gt; parameter on the config.&lt;/p&gt;
&lt;p&gt;See below the examples on how to disable the headers request on the Angular and React&amp;rsquo;s configs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@BeagleModule({
  baseUrl: &amp;#39;http://localhost:4200/assets&amp;#39;,
  module: {
    path: &amp;#39;./beagle-components.module&amp;#39;,
    name: &amp;#39;BeagleComponentsModule&amp;#39;,
  },
  components: {},
  useBeagleHeaders: false
})
export class Beagle { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;export default createBeagleUIService({
  baseUrl: &amp;#34;&amp;#34;,
  components: {},
  useBeagleHeaders: false
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

You must keep the headers enabled to make Beagle&amp;rsquo;s cache protocol working properly.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Loading components and error treatment</title>
      <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/loading-components-and-error-treatment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/loading-components-and-error-treatment/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;loading-component&#34;&gt;Loading Component&lt;/h2&gt;
&lt;p&gt;Beagle&amp;rsquo;s library already has by pattern a component that it is called when a screen loads. If necessary, you are able to change it to a customized one, according your application&amp;rsquo;s needs.&lt;/p&gt;
&lt;p&gt;To create a loading component, follow the steps below:&lt;/p&gt;
&lt;p&gt;On React:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create a substitute component;&lt;/p&gt;
&lt;p&gt;See an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import React, { FC } from &amp;#39;react&amp;#39;

const CustomLoadingComponent: FC&amp;lt;any&amp;gt; = () =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;Carregando&amp;lt;/div&amp;gt;
  )
}

export default CustomLoadingComponent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Add it to Beagle&amp;rsquo;s Service components list to substitute the pattern component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { createBeagleUIService } from &amp;#39;@zup-it/beagle-react&amp;#39;
import CustomLoadingComponent from &amp;#39;../components/CustomLoading&amp;#39;

export default createBeagleUIService&amp;lt;any&amp;gt;({
  baseUrl: &amp;#34;localhost:4000&amp;#34;,
  components: {
    &amp;#34;custom:loading&amp;#34;:CustomLoadingComponent
  }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On Angular&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create a substitute component.&lt;/p&gt;
&lt;p&gt;You can use angular CLI, if you want, to generate the component automatically, see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;ng generate component components/custom-loading
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; After that, open the file &lt;code&gt;beagle-components.module.ts&lt;/code&gt; and add the component to the list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { NgModule } from &amp;#39;@angular/core&amp;#39;
import { CustomLoadingComponent } from &amp;#39;./components/custom-loading/custom-loading.component&amp;#39;;
// import all the components you&amp;#39;re going to use with beagle

const components = [
  CustomLoadingComponent
];

@NgModule({
  declarations: components,
  entryComponents: components,
  exports: components,
  imports: [
    // everything your components depend on
  ],
})
export class BeagleComponentsModule {}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Now, you can substitute the pattern component in the &lt;code&gt;beagle.module.ts&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { BeagleModule } from &amp;#39;@zup-it/beagle-angular&amp;#39;;
import { CustomLoadingComponent } from &amp;#39;./components/custom-loading/custom-loading.component&amp;#39;;
// import all the components you wish to use with Beagle.

@BeagleModule({
  baseUrl: &amp;#39;http://mypath&amp;#39;,
  module: {
    path: &amp;#39;./beagle-components.module&amp;#39;,
    name: &amp;#39;BeagleComponentsModule&amp;#39;,
  },
  components: {
    &amp;#39;custom:loading&amp;#39;: CustomLoadingComponent
  }
})
export class Beagle { }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

The files  &lt;code&gt;beagle.module.ts&lt;/code&gt; and &lt;code&gt;beagle-components.module.ts&lt;/code&gt; are automatically generated by Angular&amp;rsquo;s library. If you haven&amp;rsquo;t found it, &lt;a href=&#34;../../../get-started/installing-beagle/&#34;&gt;&lt;strong&gt;check you installation&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;

&lt;h2 id=&#34;error-component&#34;&gt;Error Component&lt;/h2&gt;
&lt;p&gt;The pattern error component on Beagle it is called when connection error happens, for example, when a server path cannot be reached.&lt;/p&gt;
&lt;p&gt;To this component, the library shows an interface called &lt;code&gt;ErrorComponentParams&lt;/code&gt;, throught it you have access to the error list and a retry method, responsible to retry the server request.&lt;/p&gt;
&lt;h3 id=&#34;errorcomponentparams&#34;&gt;ErrorComponentParams&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attribute&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;retry&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Method&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Retry the request to the server.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;When using this interface, you can create a component, see the example below with each framework:&lt;/p&gt;
&lt;p&gt;On React, you have to create a &lt;code&gt;Functional Component&lt;/code&gt; that uses the &lt;code&gt;ErrorComponentParams&lt;/code&gt; interface. When using it, you have access to two &lt;code&gt;props&lt;/code&gt; errors and retry, which are the errors list and the &lt;code&gt;retry&lt;/code&gt; method, both described on the interface:&lt;/p&gt;
&lt;p&gt;No React, é preciso criar um &lt;code&gt;Functional Component&lt;/code&gt; que usa a interface &lt;code&gt;ErrorComponentParams&lt;/code&gt;, note que ao usá-la você tem acesso à duas &lt;code&gt;props&lt;/code&gt; errors e retry, que são respectivamente a lista de erros e o método &lt;code&gt;retry&lt;/code&gt; ambos descritos na interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { ErrorComponentParams } from &amp;#39;@zup-it/beagle-react&amp;#39;
import React, { FC } from &amp;#39;react&amp;#39;

const CustomErrorComponent: FC&amp;lt;ErrorComponentParams&amp;gt; = ({ retry }) =&amp;gt; {

  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;
        Unexpected Error!
      &amp;lt;/p&amp;gt;
      &amp;lt;button onClick={retry}&amp;gt;Retry&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  )
}


export default CustomErrorComponent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that, add it to the Beagle Service components list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { createBeagleUIService } from &amp;#39;@zup-it/beagle-react&amp;#39;
import CustomErrorComponent from &amp;#39;../components/CustomError&amp;#39;

export default createBeagleUIService&amp;lt;any&amp;gt;({
  baseUrl: &amp;#34;localhost:4000&amp;#34;,
  components: {
    &amp;#34;custom:error&amp;#34;:CustomErrorComponent
  }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On Angular, create a component, if you prefer use angula cli to automatically generate the inicial structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;ng g component components/custom-error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Open the  &lt;code&gt;controller&lt;/code&gt; file of the created component and add the &lt;code&gt;ErrorComponentParams&lt;/code&gt; interface.  The interface gives access to two &lt;code&gt;@Inputs&lt;/code&gt; errors and retry, which are the errors list and the request method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { Component, Input } from &amp;#39;@angular/core&amp;#39;;
import { ErrorComponentParams } from &amp;#39;@zup-it/beagle-angular&amp;#39;;

@Component({
  selector: &amp;#39;app-custom-error&amp;#39;,
  templateUrl: &amp;#39;./custom-error.component.html&amp;#39;,
  styleUrls: [&amp;#39;./custom-error.component.less&amp;#39;]
})
export class CustomErrorComponent implements ErrorComponentParams {

  @Input() retry: () =&amp;gt; void;

  handleRetry() {
    this.retry();
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, add the created component to the file list &lt;code&gt;beagle-components.module.ts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { NgModule } from &amp;#39;@angular/core&amp;#39;;
import { CustomErrorComponent } from &amp;#39;./components/custom-error/custom-error.component&amp;#39;;
// import all the components you&amp;#39;re going to use with beagle

const components = [
  CustomErrorComponent
];

@NgModule({
  declarations: components,
  entryComponents: components,
  exports: components,
  imports: [
    // everything your components depend on
  ],
})
export class BeagleComponentsModule {}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, replace the pattern component to the  &lt;code&gt;beagle.module.ts&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { CustomErrorComponent } from &amp;#39;./components/custom-error/custom-error.component&amp;#39;;
// import all the components you wish to use with Beagle.

@BeagleModule({
  baseUrl: &amp;#39;http://localhost:4202/assets&amp;#39;,
  module: {
    path: &amp;#39;./beagle-components.module&amp;#39;,
    name: &amp;#39;BeagleComponentsModule&amp;#39;,
  },
  components: {
    &amp;#39;custom:error&amp;#39;: CustomErrorComponent
  }
})
export class Beagle { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

The files  &lt;code&gt;beagle.module.ts&lt;/code&gt; and &lt;code&gt;beagle-components.module.ts&lt;/code&gt; are automatically generated by Angular&amp;rsquo;s library. If you haven&amp;rsquo;t found them, &lt;a href=&#34;../../../get-started/installing-beagle/&#34;&gt;&lt;strong&gt;check your installation&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Remote view parameters</title>
      <link>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/remote-view-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/resources/customization/beagle-for-web/remote-view-parameters/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;beagle-remote-view&#34;&gt;Beagle Remote View&lt;/h2&gt;
&lt;p&gt;Beagle&amp;rsquo;s library offers a component to help render the server-driven screens, remote view:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;beagle-remote-view [loadParams]=&amp;#34;loadParams&amp;#34;&amp;gt;&amp;lt;/beagle-remote-view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;BeagleRemoteView {...loadParams} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Angular and React accept remote view&amp;rsquo;s properties that are called Load Params. It is through it, that some options are configured to influence the way the screens are rendered.&lt;/p&gt;
&lt;p&gt;See below that properties accepted by it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;import { LoadParams } from &amp;#39;@zup-it/beagle-web&amp;#39;;

const params: LoadParams = {
  path: &amp;#39;/payload.json&amp;#39;,
  fallback: {_beagleComponent_: &amp;#39;beagle:text&amp;#39;, text:&amp;#39;Fallback Error&amp;#39;},
  method: &amp;#39;get&amp;#39;,
  headers: {&amp;#39;header&amp;#39;: &amp;#39;value&amp;#39;},
  shouldShowLoading: true,
  shouldShowError: true,
  strategy: &amp;#34;network-only&amp;#34;,
  loadingComponent: &amp;#39;myComponentLoading&amp;#39;,
  errorComponent: &amp;#39;myComponentError&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;path&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Required.&lt;/strong&gt;  Server path to load the JSON with the server-drive screen.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fallback&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BeagleComponent&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Component to be rendered in case the request fails.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;method&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Http method&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Http method to make a request.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;headers&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Map&amp;lt;key, value&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Header list to attach when you make a request.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shouldShowLoading&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Show or not the loading component.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shouldShowError&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Show or not the error component.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;strategy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string&amp;lt;&lt;a href=&#34;cache-strategy.md&#34;&gt;&lt;strong&gt;Cache strategy&lt;/strong&gt;&lt;/a&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cache strategy used in the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;loadingComponent&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Customized component for loading.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;errorComponent&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Customized component for error.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
