<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beagle – Android</title>
    <link>https://zupit.github.io/docs-beagle/docs/get-started/creating-a-project-from-scratch/android/</link>
    <description>Recent content in Android on Beagle</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://zupit.github.io/docs-beagle/docs/get-started/creating-a-project-from-scratch/android/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Design System with Beagle Android</title>
      <link>https://zupit.github.io/docs-beagle/docs/get-started/creating-a-project-from-scratch/android/design-system-with-beagle-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/docs-beagle/docs/get-started/creating-a-project-from-scratch/android/design-system-with-beagle-android/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;creating-a-design-system&#34;&gt;&lt;strong&gt;Creating a Design System&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;On the use example of the page creating an Android project with Beagle , you saw how to &lt;a href=&#34;../../.././&#34;&gt;&lt;strong&gt;implement Beagle&lt;/strong&gt;&lt;/a&gt; to create a simple server-driven screen with only 2 texts: 1 title and 1 paragraph.&lt;/p&gt;
&lt;p&gt;In this tutorial, the idea is to get deeper from the &lt;a href=&#34;./#passo-7-exibindo-sua-tela-server-driven&#34;&gt;&lt;strong&gt;previous project&lt;/strong&gt;&lt;/a&gt; to &lt;strong&gt;create a Design System&lt;/strong&gt; &lt;strong&gt;on Beagle&amp;rsquo;s library&lt;/strong&gt;. To better illustrate the explanation, we&amp;rsquo;ll use these &lt;a href=&#34;https://github.com/ZupIT/beagle-examples&#34;&gt;&lt;strong&gt;sample codes&lt;/strong&gt;&lt;/a&gt; that you can find out in our repository.&lt;/p&gt;
&lt;p&gt;The Design System we will configure, it will allow you to customize some Beagle&amp;rsquo;s components, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text&lt;/li&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;li&gt;Toolbar&lt;/li&gt;
&lt;li&gt;TabBar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides, it will be possible to customize the other 2 text components we created on the screen from the previous tutorial.&lt;/p&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;With this Design System, you&amp;rsquo;ll be able to register &lt;code&gt;styles&lt;/code&gt;as fonts, colors, font size and customized components.&lt;/p&gt;
&lt;p&gt;Generally, we define as an application&amp;rsquo;s design system a class that implements your interface. From her, we can implement all the methods that overwrite the responsible functions to apply &amp;ldquo;styles&amp;rdquo; on the components. Inside a function, it&amp;rsquo;s possible to state N styles or even none (except in some cases).&lt;/p&gt;
&lt;p&gt;On Beagle, each style must be referenced in a way that each one has a name to be easily identified.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;On the example below, we have a image method that&amp;rsquo;s registering many images that are been used to build a page from backend.&lt;/p&gt;
&lt;p&gt;Notice that, on her, we can use the &lt;code&gt;when&lt;/code&gt; operator to design styles, that is the first value is listed as a &lt;code&gt;string&lt;/code&gt; that identifies Beagle&amp;rsquo;s component syle &lt;em&gt;(on a similar relation key/value)&lt;/em&gt; and with a&lt;code&gt;Arrow Function -&amp;gt;&lt;/code&gt; where we list the component&amp;rsquo;s style &lt;em&gt;(id style on Android)&lt;/em&gt;. Again, the logic here is similar to a pair “key/value”.&lt;/p&gt;
&lt;p&gt;With the function already stablished, the &lt;em&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;/em&gt; operator will contain a “default” style, like we demonstrate on the code below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/sRycVP6U1ThpjYfz4KJHH1Dp6jCZxONg7u1KC-_CDCiROkOFwhOvF5kGOxuTpOexLUZ8R-J97UCMNKqV16uUz4MBGIO279Dn4vS6LZiqIFn_kOtxtX5wLMo57wKS3_5nKdDoc3gM&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The yellow highlight shows the &amp;ldquo;style name&amp;rdquo; stated on backend and rescued on frontend (Android) while the orange highlight shows the style created on Android and that will be executed when the JSON from backend reads the &amp;ldquo;Style name&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;getting-start&#34;&gt;&lt;strong&gt;Getting start&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go to practice! First, you have to look for a style folder named &amp;ldquo;Style&amp;rdquo; on your IDE Android. To do so on Android Studio, just click on &lt;strong&gt;res &amp;gt; values &amp;gt; styles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once you made this part, open the style&amp;rsquo;s file (styles) and you&amp;rsquo;ll see a screen similar to the example below. This is the file where we&amp;rsquo;ll list all the styles we&amp;rsquo;re intending to apply on Android&amp;rsquo;s components.&lt;/p&gt;
&lt;p&gt;We suggest you to keep this file open, because we&amp;rsquo;ll use it some steps ahead.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/1ykMjqUpXX3xTPLxPl3H3nNRWkB5nK7shGIaFvx3oRATEJ4eK4yhPG1fpUECPjOnKEdRMhSzaXT5byE5PUFhxZIo1SCqC6j345H4qrjTEv4ShWK1PZsHrUB7GmmEjeW6Mo1-jjvd&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We divided the design system creation in 4 steps, as we&amp;rsquo;ll see now.&lt;/p&gt;
&lt;h3 id=&#34;step-1-configure-the-design-system-for-android&#34;&gt;Step 1: Configure the Design System for Android&lt;/h3&gt;
&lt;p&gt;The first step on design system creation is to create a class to represent it.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Just remember that the design system we&amp;rsquo;re about to create is part of the project we mentioned in the beginning.
&lt;/div&gt;

&lt;p&gt;With the project opened, click on beagle&amp;rsquo;s folder and, with the right button, click on &lt;em&gt;&lt;strong&gt;new &amp;gt; kotlin file/clas&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;s.&lt;/strong&gt; Once you made it, follow these instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name your file as &lt;code&gt;AppDesignSystem&lt;/code&gt;  (or another name of your preference).&lt;/li&gt;
&lt;li&gt;Indicate that this class should extends a Beagle&amp;rsquo;s interface called &lt;code&gt;DesignSystem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;@BeagleComponent&lt;/code&gt; note above the &lt;code&gt;AppDesignSystem&lt;/code&gt;class name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you follow these steps, Android will request that some functions must be implemented to be responsible to apply &amp;ldquo;styles&amp;rdquo; to the components. After you agree to implement these methods, your screen must be like the example below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/8j48P3-ov2XV1Sz24VzIHEyTLzTVMqDntu7-3iYkFboGpXtDiBF1FY2ddkcT_a0qBfo_LO8l-rbn-mriSreZd33XsGzHqKvyWsPsE4wtaJWeoRxyy5QxMMgWyISuwVSOThs97aTp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;With this way, the &lt;code&gt;AppDesignSystem&lt;/code&gt; will overwrite, at least, six methods in which each one represents one component&amp;rsquo;s type. Each method will apply styles to visual components that will be registered.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll demonstrate further how these components and their styles are listed and organized inside these methods. For now, let&amp;rsquo;s understand what each method does:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/strong&gt; method applies a theme that can be similar to the native platform. It&amp;rsquo;s the &lt;strong&gt;only mandatory method&lt;/strong&gt; when we create a design system class.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;buttonStyle&lt;/code&gt;&lt;/strong&gt; method is responsible to apply style to Button components.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;image&lt;/code&gt;&lt;/strong&gt; method is responsible to register a image so that can be referenced on a server-driven screen.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;tabBarStyle&lt;/code&gt;&lt;/strong&gt; method is responsible to apply styles to TabBar components.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;textAppearance&lt;/code&gt;&lt;/strong&gt; method applies to Text components.&lt;/li&gt;
&lt;li&gt;And the &lt;strong&gt;&lt;code&gt;toolbarStyle&lt;/code&gt;&lt;/strong&gt; method responsible to apply style to Toolbar components.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you create a Design System class, it&amp;rsquo;s necessary to have, at least, one theme method stated. The other methods can be left without implementation, as you can see in the image above.&lt;/p&gt;
&lt;h3 id=&#34;step-2-create-a-theme&#34;&gt;Step 2: &lt;strong&gt;Create a theme&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The next step is create a theme component so our Beagle&amp;rsquo;s application can use when renders our &lt;a href=&#34;../../../../../principais-conceitos#server-driven-ui&#34;&gt;&lt;strong&gt;server-driven screens.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, let&amp;rsquo;s register three colors on the color file on Android.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Access the package &lt;em&gt;r&lt;strong&gt;es &amp;gt; values &amp;gt; colors&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Addd three colors inside the &lt;code&gt;&amp;lt;resources&amp;gt;&amp;lt;/resources&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;Type the code below so you can create the white, black and orange colors on your color palette.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;color name=&amp;#34;colorWhite&amp;#34;&amp;gt;#FFFFFF&amp;lt;/color&amp;gt;
&amp;lt;color name=&amp;#34;colorBlack&amp;#34;&amp;gt;#000000&amp;lt;/color&amp;gt;
&amp;lt;color name=&amp;#34;colorOrange&amp;#34;&amp;gt;#FFA500&amp;lt;/color&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Then, let&amp;rsquo;s access the &lt;code&gt;style&lt;/code&gt; file,  like we saw before.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

In case you have closed the file, you can find it inside the values package. You&amp;rsquo;ll have to access the package because we&amp;rsquo;re going to create a style to our server-driven theme. To do so, click on _&lt;strong&gt;res &amp;gt; values &amp;gt; styles&lt;/strong&gt;. _
&lt;/div&gt;

&lt;p&gt;Copy and paste the code below using the &amp;lt;resources&amp;gt;&amp;lt;/resources&amp;gt; tag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;    &amp;lt;style name=&amp;#34;AppThemeServerDriven&amp;#34; parent=&amp;#34;Theme.AppCompat.NoActionBar&amp;#34;&amp;gt;
        &amp;lt;!-- Customize your theme here. --&amp;gt;
        &amp;lt;item name=&amp;#34;colorPrimary&amp;#34;&amp;gt;@color/colorPrimary&amp;lt;/item&amp;gt;
        &amp;lt;item name=&amp;#34;colorPrimaryDark&amp;#34;&amp;gt;@color/colorPrimaryDark&amp;lt;/item&amp;gt;
        &amp;lt;item name=&amp;#34;colorAccent&amp;#34;&amp;gt;@color/colorAcent&amp;lt;/item&amp;gt;
        &amp;lt;item name=&amp;#34;android:windowBackground&amp;#34;&amp;gt;@color/colorWhite&amp;lt;/item&amp;gt;
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Two important changes&lt;/strong&gt; happen to this file:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change 1:&lt;/strong&gt; A new theme style was created with the name &lt;code&gt;AppThemeServerDriven&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notice that in this style , the &lt;code&gt;parent&lt;/code&gt; must be &lt;code&gt;Theme.AppCompat.NoAction bar&lt;/code&gt;. This detail is very important because Beagle particularly treats  an action bar and controls its behavior with other method on the design system called &lt;code&gt;toolbarStyle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;__&lt;strong&gt;Change 2:&lt;/strong&gt; New colors were listed inside the new esteem.&lt;/p&gt;
&lt;p&gt;Notice how they correspond to the items &lt;code&gt;colorPrimary&lt;/code&gt;, &lt;code&gt;colorPrimaryDark&lt;/code&gt; normally referenced in this way on the Android&amp;rsquo;s application pattern theme. We&amp;rsquo;re suggesting here a similar theme, but you can define how you want to. For now, let&amp;rsquo;s just keep this way.&lt;/p&gt;
&lt;p&gt;Now, we need to access the &lt;code&gt;AppDesignSystem&lt;/code&gt; class, that we recently created, to register the Design System style. Considering we only have one theme, you can follow these instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy and paste the line and replace the theme function on&lt;code&gt;AppDesignSystem&lt;/code&gt; class and we&amp;rsquo;re done.&lt;/li&gt;
&lt;li&gt;Your theme is configured and registered on Beagle.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;override fun theme(): Int = R.style.AppThemeServerDriven
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-customize-a-component&#34;&gt;&lt;strong&gt;Step 3: Customize a component&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This is the moment that occurs the &lt;a href=&#34;../../../../principais-conceitos#backend-for-frontend&#34;&gt;&lt;strong&gt;BFF&lt;/strong&gt;&lt;/a&gt;, when frontend connects to backend.&lt;/p&gt;
&lt;p&gt;To do so, you&amp;rsquo;ll have to &lt;strong&gt;configure Android&amp;rsquo;s frontend and Intellij&amp;rsquo;s backend&lt;/strong&gt;. In case you haven&amp;rsquo;t this configuration done, just follow the &lt;a href=&#34;https://github.com/ZupIT/beagle-examples&#34;&gt;&lt;strong&gt;backend&amp;rsquo;s configuration&lt;/strong&gt;&lt;/a&gt; and run it.&lt;/p&gt;
&lt;p&gt;For our backend here, we created a server-driven page with 2 texts: 1 title and 1 paragraph. It should be like this when rendered on frontend:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/Rms7sJWr8_BXtHuaxpxtJwQly1O7qBX79AqhSlrj9TSjTqD_7eqFyavstkbgwQO3BVjoGeVV7W53KTVxUkonTD7R6wYBVhWWqa_tfwDaFBw8AVPu-KLQLcZ0H3A8UDK-X_9JMKyr&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Notice that our screen is basically structure and content. The text is on standard size and the layout doesn&amp;rsquo;t have a style.&lt;/p&gt;
&lt;p&gt;To attribute a style to these texts, we&amp;rsquo;ll recorrer a nossa tela configurada lá no BFF:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the BFF project and look for the &lt;code&gt;FirstScreenBeagleBuilder&lt;/code&gt;file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is the file that contains the code of your server-driven screen, that has to be configured as it shows in the image below.&lt;/p&gt;
&lt;p&gt;On that image, you&amp;rsquo;ll see that we built a component&amp;rsquo;s hierarchy with one SCREEN and two types of TEXT component.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

For this point on the tutorial, just focus on what must be done to apply one style to our components.
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/b3DvRw3pXFnrhgZtHF2kNMzZCY7vno0oqjs7VsxT2l9aukfyBI2KHfSg-5bcb-hgV_RgXqm0HxlVJBeimQ09bFiXc9R-ZFDrKPcV-PTQf7pbs8P1eZApkyldGdmmKJ3kQMgrUfYR&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To add a style and a text element, you should list the style&amp;rsquo;s name inside the text component, as indicated in the image below. Don&amp;rsquo;t forget to separate the components by one comma.&lt;/p&gt;
&lt;p&gt;Hold the Ctrl button and put your mouse on the &lt;code&gt;Text&lt;/code&gt; component so you&amp;rsquo;ll see the attribute&amp;rsquo;s list that this component can receive from backend. For now, we&amp;rsquo;ll only use the &lt;code&gt;Style&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 2. Put a comma after the text attribute = &amp;quot;Hello Beagle&amp;quot;, and write the another attribute you want to define, which in this case is the `style`

3. Type a `“HelloBeagle.Text.Title”` string e we&#39;re done! The style was defined to this text component.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Text(
    text = &amp;#34;Hello Beagle&amp;#34;,
    style = “HelloBeagle.Text.Title”
).applyFlex(
        Flex(
            margin = EdgeValue(
                top = 16.unitRal(Real)
            ),
            alignSelf = Alignment.CENTER
        )
),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For now, don&amp;rsquo;t worry about the other elements, like &lt;code&gt;.applyFlex&lt;/code&gt;, and other configurations. Just make sure that there&amp;rsquo;s nothing else to be changed on the example, let&amp;rsquo;s keep it this way now.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Repeat this process to the other &lt;code&gt;Text&lt;/code&gt; component - the paragraph -, with the difference that, here, you will name it as &lt;code&gt;“Design.System.Text.Description”&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;This all we&amp;rsquo;re gonna do on the backend for now. You can run your backend&amp;rsquo;s application so the service be available and, soon, you&amp;rsquo;ll see your styled screen on Android.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

In case you have any problem, we recommend you to &lt;a href=&#34;https://app.gitbook.com/@zup-products/s/beagle/~/drafts/-MGhl-E_OjnBR8rfYtgB/get-started/installing-beagle/beagle-backend&#34;&gt;&lt;strong&gt;follow this tutorial to implement the backend.&lt;/strong&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt; 2. Return to Android Studio and access again the style&#39;s file on the package **res &amp;amp;gt; values &amp;amp;gt; styles**. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To finish this stage, you have to create on Android the styles and names we just attributed to the texts on the server-driven screen.&lt;/p&gt;
&lt;p&gt;You can do this by adding the style&amp;rsquo;s configuration inside the &amp;lt;resources&amp;gt;&amp;lt;/resources&amp;gt; tag, as its listed below. Notice that you already have some defined styles&#39; elements and must add this one more. Copy and paste the code below with the text that we want to be our &lt;code&gt;Title&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;style name=&amp;#34;Design.System.Text.Title&amp;#34; parent=&amp;#34;TextAppearance.AppCompat&amp;#34;&amp;gt;
    &amp;lt;item name=&amp;#34;android:textColor&amp;#34;&amp;gt;@color/colorOrange&amp;lt;/item&amp;gt;
    &amp;lt;item name=&amp;#34;android:textSize&amp;#34;&amp;gt;20sp&amp;lt;/item&amp;gt;
    &amp;lt;item name=&amp;#34;textAllCaps&amp;#34;&amp;gt;True&amp;lt;/item&amp;gt;
    &amp;lt;item name=&amp;#34;android:textStyle&amp;#34;&amp;gt;bold&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that you can define many more aspects inside the style because all the options available on Android can be configured on it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The first line&lt;/strong&gt; defines the style&amp;rsquo;s name like &amp;ldquo;HelloBealge.Text.Title&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The second&lt;/strong&gt; defines the text&amp;rsquo;s orange color, as listed above.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The third&lt;/strong&gt; defines the text&amp;rsquo;s size, like 20 sp.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The fourth&lt;/strong&gt; defines that the text must be exhibited on caps lock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The fifth&lt;/strong&gt; linha defines that the text will be on bold.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We should make the same process with the paragraph text. In this case, we&amp;rsquo;ll create this style: &lt;code&gt;Design.System.Text.Description&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/hbl12RSXzpxXGQnsuyuT7GF1-GOv979QdVamfNC413K-BVY1qRhAsgl1i3vv8Fkc9gvIZxdmzNuXmmkdJuF9-WJco0fycrdVKQkaGCDDm2bYHsaxrfvsK6GafXnOVKtORjfWtIBt&#34; alt=&#34;&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;It&amp;rsquo;s a good practice to define a default style. For this tutorial, we&amp;rsquo;ll define one to be applied on normal texts.&lt;/p&gt;
&lt;p&gt;The objective is that this value be applied on a text that came from backend without a predefined style.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/SHrBdleCbQha4LNeMd2bM_Kfq5R0QaDxO1nc36Kc7iu3Ix7w0kiYBkJ2c9EHYbfnHcorrqBcPRjitQUBUWEN8Zty1J1Y1fFsb4BtLnxjT05s-iWGzdYX6Ev5q0cjwpyRuVhwFc0e&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;And done! Our components are customized! Now let&amp;rsquo;s get to the final stage.&lt;/p&gt;
&lt;h3 id=&#34;step-4-register-a-component-on-design-system&#34;&gt;&lt;strong&gt;Step 4: Register a component on Design System&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Once you have already all the styles created, it&amp;rsquo;s the moment to register them in our &lt;code&gt;AppDesignSystem&lt;/code&gt; class because it&amp;rsquo;s there where Beagle applies all the defined styles on Android Studio on server-driven screens that came from backend.&lt;/p&gt;
&lt;p&gt;To do so, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;code&gt;AppDesignSystem&lt;/code&gt; class and go to the &lt;code&gt;textAppearance&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Inside this method, create a when operator. Inside it, we&amp;rsquo;ll list all the text styles that we want to use now and later.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you have any trouble on making this configuration, check out &lt;a href=&#34;https://kotlinlang.org/docs/reference/control-flow.html#when-expression&#34;&gt;&lt;strong&gt;how to use When.&lt;/strong&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Infor the &lt;code&gt;&amp;quot;styles&amp;quot;&lt;/code&gt; names we referenced on backend (BFF) and the style created on Android, programmatically connecting them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On &lt;em&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;/em&gt; , we should list the &lt;code&gt;default&lt;/code&gt; style we created. Follow the example on the image below:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/sSGv-3xd1n83s2XYJnekTnP1tVENTXCV-j4W-KcQdaRgjEs-lPe6V1-2DI86IasCOgPvO2fQbLd8CRtrVXbW60ejX60vl9IYGu9r6-V3WnV68jtpUSEzTtomWQRZZYrrHwPucgtn&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Notice that the textAppearance method receives a string as a &lt;code&gt;name&lt;/code&gt;parameter, that comes from our server-driven screen.&lt;/p&gt;
&lt;p&gt;On the first register, we list the name created for the title style:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“HelloBeagle.Text.Title”&lt;/li&gt;
&lt;li&gt;With a &lt;code&gt;arrow function&lt;/code&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; we listed the address of the Android&amp;rsquo;s style, that is the style ID  created in the same way we do on  Android Studio: &lt;em&gt;R.style.Design_System_Text_Title.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Repeat the same process for the second register because now we&amp;rsquo;re registering the style we want to use for the paragraphs with a description we created on our server-driven page. The second register must be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;“Beagle.Text.Description” -&amp;gt;  R.style.Design_System_Text_Description.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, finally, the &lt;em&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;/em&gt; parameter of our &lt;code&gt;when&lt;/code&gt; operator, we should inform the default we created for the text. That means that any style request for a server-driven page that doesn&amp;rsquo;t come with a predefined style, the default style will be automatically applied.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In these cases, the &lt;em&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;/em&gt; parameter must return  &lt;em&gt;-&amp;gt;  R.style.Design_System_Text_Default.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the elements listed on this way, you can prepare a Design System with many options of text sizes, colors and margins. Just remember that these styles can be created to use now or in another moment.&lt;/p&gt;


&lt;div class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;Well done, your Design System is ready!&lt;/p&gt;
&lt;p&gt;Now, you just have to execute your Android application and your screen will show the customized styles we just defined.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;whats--next&#34;&gt;What&amp;rsquo;s  next?&lt;/h2&gt;
&lt;p&gt;Now that you already created your Design System, it&amp;rsquo;s possible to change the size, color or even test the styles as you wish.&lt;/p&gt;
&lt;p&gt;One of the biggest advantages on using a server-driven page is that you can work on a mature design system. That means if you can change the way components are positioned on the backend, it&amp;rsquo;s possible to &amp;ldquo;change your screen&amp;rdquo; in the way you want to, all through backend.&lt;/p&gt;
&lt;p&gt;On this example, we used simple elements to explain design system, but as you could see on the number of functions on this class, the design system can be very broad.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
